(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('vuex')) :
    typeof define === 'function' && define.amd ? define(['exports', 'vuex'], factory) :
    (global = global || self, factory(global.DirectVuex = {}, global.Vuex));
}(this, (function (exports, Vuex) { 'use strict';

    Vuex = Vuex && Object.prototype.hasOwnProperty.call(Vuex, 'default') ? Vuex['default'] : Vuex;

    var __spreadArrays = (this && this.__spreadArrays) || function () {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };
    function createDirectStore(options) {
        var original = new Vuex.Store(options);
        var store = {
            get state() {
                return original.state;
            },
            getters: toDirectGetters(options, original.getters),
            commit: toDirectCommit(options, original.commit),
            dispatch: toDirectDispatch(options, original.dispatch),
            original: original
        };
        original.direct = store;
        return {
            store: store,
            rootGetterContext: function (_a) {
                var state = _a[0], getters = _a[1];
                return getModuleGetterContext([state, getters, state, getters], options, options);
            },
            moduleGetterContext: function (args, moduleOptions) {
                return getModuleGetterContext(args, moduleOptions, options);
            },
            rootActionContext: function (originalContext) { return getModuleActionContext(originalContext, options, options); },
            moduleActionContext: function (originalContext, moduleOptions) { return getModuleActionContext(originalContext, moduleOptions, options); },
        };
    }
    function localGetterContext(_a, options) {
        var state = _a[0], getters = _a[1];
        return getModuleGetterContext([state, getters, undefined, undefined], options);
    }
    function localActionContext(originalContext, options) {
        return getModuleActionContext(originalContext, options);
    }
    function defineModule(options) {
        return options;
    }
    function defineModules() {
        return function (modules) { return modules; };
    }
    function defineGetters() {
        return function (getters) { return getters; };
    }
    function defineMutations() {
        return function (mutations) { return mutations; };
    }
    function defineActions(actions) {
        return actions;
    }
    var createModule = obsolete(defineModule, "createModule", "defineModule");
    var createModules = obsolete(defineModules, "createModules", "defineModules");
    var createGetters = obsolete(defineGetters, "createGetters", "defineGetters");
    var createMutations = obsolete(defineMutations, "createMutations", "defineMutations");
    var createActions = obsolete(defineActions, "createActions", "defineActions");
    function obsolete(fn, oldName, newName) {
        return (function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            // tslint:disable-next-line:no-console
            console.warn("Function '" + oldName + "' is obsolete, please use '" + newName + "'.");
            return fn.apply(void 0, args);
        });
    }
    var directVuex = {
        createDirectStore: createDirectStore, defineModule: defineModule, defineModules: defineModules, defineGetters: defineGetters, defineMutations: defineMutations, defineActions: defineActions,
        localGetterContext: localGetterContext, localActionContext: localActionContext,
        createModule: createModule, createModules: createModules, createGetters: createGetters, createMutations: createMutations, createActions: createActions
    };
    // Getters
    var gettersCache = new WeakMap();
    function toDirectGetters(options, originalGetters) {
        var getters = gettersCache.get(originalGetters);
        // console.log(">> to-getters", getters ? "FROM_CACHE" : "CREATE", options)
        if (!getters) {
            getters = gettersFromOptions({}, options, originalGetters);
            gettersCache.set(originalGetters, getters);
        }
        return getters;
    }
    function gettersFromOptions(result, options, originalGetters, hierarchy) {
        if (hierarchy === void 0) { hierarchy = []; }
        if (options.getters)
            createDirectGetters(result, options.getters, originalGetters, hierarchy);
        if (options.modules) {
            for (var _i = 0, _a = Object.keys(options.modules); _i < _a.length; _i++) {
                var moduleName = _a[_i];
                var moduleOptions = options.modules[moduleName];
                if (moduleOptions.namespaced)
                    result[moduleName] = gettersFromOptions({}, moduleOptions, originalGetters, __spreadArrays(hierarchy, [moduleName]));
                else
                    gettersFromOptions(result, moduleOptions, originalGetters, hierarchy);
            }
        }
        return result;
    }
    function createDirectGetters(result, gettersImpl, originalGetters, hierarchy) {
        var prefix = !hierarchy || hierarchy.length === 0 ? "" : hierarchy.join("/") + "/";
        var _loop_1 = function (name_1) {
            var _a;
            Object.defineProperties(result, (_a = {},
                _a[name_1] = {
                    get: function () { return originalGetters["" + prefix + name_1]; }
                },
                _a));
        };
        for (var _i = 0, _a = Object.keys(gettersImpl); _i < _a.length; _i++) {
            var name_1 = _a[_i];
            _loop_1(name_1);
        }
    }
    // Mutations
    var commitCache = new WeakMap();
    function toDirectCommit(options, originalCommit) {
        var commit = commitCache.get(originalCommit);
        // console.log(">> to-commit", commit ? "FROM_CACHE" : "CREATE", options)
        if (!commit) {
            commit = commitFromOptions({}, options, originalCommit);
            commitCache.set(originalCommit, commit);
        }
        return commit;
    }
    var rootCommitCache = new WeakMap();
    function toDirectRootCommit(rootOptions, originalCommit) {
        var commit = rootCommitCache.get(originalCommit);
        // console.log(">> to-rootCommit", commit ? "FROM_CACHE" : "CREATE", rootOptions)
        if (!commit) {
            var origCall = function (mutation, payload) { return originalCommit(mutation, payload, { root: true }); };
            commit = commitFromOptions({}, rootOptions, origCall);
            rootCommitCache.set(originalCommit, commit);
        }
        return commit;
    }
    function commitFromOptions(result, options, originalCommitCall, hierarchy) {
        if (hierarchy === void 0) { hierarchy = []; }
        if (options.mutations)
            createDirectMutations(result, options.mutations, originalCommitCall, hierarchy);
        if (options.modules) {
            for (var _i = 0, _a = Object.keys(options.modules); _i < _a.length; _i++) {
                var moduleName = _a[_i];
                var moduleOptions = options.modules[moduleName];
                if (moduleOptions.namespaced)
                    result[moduleName] = commitFromOptions({}, moduleOptions, originalCommitCall, __spreadArrays(hierarchy, [moduleName]));
                else
                    commitFromOptions(result, moduleOptions, originalCommitCall, hierarchy);
            }
        }
        return result;
    }
    function createDirectMutations(result, mutationsImpl, originalCommitCall, hierarchy) {
        var prefix = !hierarchy || hierarchy.length === 0 ? "" : hierarchy.join("/") + "/";
        var _loop_2 = function (name_2) {
            result[name_2] = function (payload) { return originalCommitCall("" + prefix + name_2, payload); };
        };
        for (var _i = 0, _a = Object.keys(mutationsImpl); _i < _a.length; _i++) {
            var name_2 = _a[_i];
            _loop_2(name_2);
        }
    }
    // Actions
    var dispatchCache = new WeakMap();
    function toDirectDispatch(options, originalDispatch) {
        var dispatch = dispatchCache.get(originalDispatch);
        // console.log(">> to-dispatch", dispatch ? "FROM_CACHE" : "CREATE", options)
        if (!dispatch) {
            dispatch = dispatchFromOptions({}, options, originalDispatch);
            dispatchCache.set(originalDispatch, dispatch);
        }
        return dispatch;
    }
    var rootDispatchCache = new WeakMap();
    function toDirectRootDispatch(rootOptions, originalDispatch) {
        var dispatch = rootDispatchCache.get(originalDispatch);
        // console.log(">> to-rootDispatch", dispatch ? "FROM_CACHE" : "CREATE", rootOptions)
        if (!dispatch) {
            var origCall = function (mutation, payload) { return originalDispatch(mutation, payload, { root: true }); };
            dispatch = dispatchFromOptions({}, rootOptions, origCall);
            rootDispatchCache.set(originalDispatch, dispatch);
        }
        return dispatch;
    }
    function dispatchFromOptions(result, options, originalDispatchCall, hierarchy) {
        if (hierarchy === void 0) { hierarchy = []; }
        if (options.actions)
            createDirectActions(result, options.actions, originalDispatchCall, hierarchy);
        if (options.modules) {
            for (var _i = 0, _a = Object.keys(options.modules); _i < _a.length; _i++) {
                var moduleName = _a[_i];
                var moduleOptions = options.modules[moduleName];
                if (moduleOptions.namespaced)
                    result[moduleName] = dispatchFromOptions({}, moduleOptions, originalDispatchCall, __spreadArrays(hierarchy, [moduleName]));
                else
                    dispatchFromOptions(result, moduleOptions, originalDispatchCall, hierarchy);
            }
        }
        return result;
    }
    function createDirectActions(result, actionsImpl, originalDispatchCall, hierarchy) {
        var prefix = !hierarchy || hierarchy.length === 0 ? "" : hierarchy.join("/") + "/";
        var _loop_3 = function (name_3) {
            result[name_3] = function (payload) { return originalDispatchCall("" + prefix + name_3, payload); };
        };
        for (var _i = 0, _a = Object.keys(actionsImpl); _i < _a.length; _i++) {
            var name_3 = _a[_i];
            _loop_3(name_3);
        }
    }
    // GetterContext
    var getterContextCache = new WeakMap();
    function getModuleGetterContext(args, options, rootOptions) {
        var state = args[0], getters = args[1], rootState = args[2], rootGetters = args[3];
        var context = actionContextCache.get(state);
        // console.log(">> to-getterContext", context ? "FROM_CACHE" : "CREATE", options)
        if (!context) {
            if (rootOptions) {
                context = {
                    get rootState() {
                        return rootState;
                    },
                    get rootGetters() {
                        return toDirectGetters(rootOptions, rootGetters);
                    },
                    get state() {
                        return state;
                    },
                    get getters() {
                        return toDirectGetters(options, getters);
                    }
                };
            }
            else {
                context = {
                    get state() {
                        return state;
                    },
                    get getters() {
                        return toDirectGetters(options, getters);
                    }
                };
            }
            if (state) // Can be undefined in unit tests
                getterContextCache.set(state, context);
        }
        return context;
    }
    // ActionContext
    var actionContextCache = new WeakMap();
    function getModuleActionContext(originalContext, options, rootOptions) {
        var context = actionContextCache.get(originalContext.state);
        // console.log(">> to-actionContext", context ? "FROM_CACHE" : "CREATE", options)
        if (!context) {
            if (rootOptions) {
                context = {
                    get rootState() {
                        return originalContext.rootState;
                    },
                    get rootGetters() {
                        return toDirectGetters(rootOptions, originalContext.rootGetters);
                    },
                    get rootCommit() {
                        return toDirectRootCommit(rootOptions, originalContext.commit);
                    },
                    get rootDispatch() {
                        return toDirectRootDispatch(rootOptions, originalContext.dispatch);
                    },
                    get state() {
                        return originalContext.state;
                    },
                    get getters() {
                        return toDirectGetters(options, originalContext.getters);
                    },
                    get commit() {
                        return toDirectCommit(options, originalContext.commit);
                    },
                    get dispatch() {
                        return toDirectDispatch(options, originalContext.dispatch);
                    }
                };
            }
            else {
                context = {
                    get state() {
                        return originalContext.state;
                    },
                    get getters() {
                        return toDirectGetters(options, originalContext.getters);
                    },
                    get commit() {
                        return toDirectCommit(options, originalContext.commit);
                    },
                    get dispatch() {
                        return toDirectDispatch(options, originalContext.dispatch);
                    }
                };
            }
            if (originalContext.state) // Can be undefined in unit tests
                actionContextCache.set(originalContext.state, context);
        }
        return context;
    }

    exports.createActions = createActions;
    exports.createDirectStore = createDirectStore;
    exports.createGetters = createGetters;
    exports.createModule = createModule;
    exports.createModules = createModules;
    exports.createMutations = createMutations;
    exports.default = directVuex;
    exports.defineActions = defineActions;
    exports.defineGetters = defineGetters;
    exports.defineModule = defineModule;
    exports.defineModules = defineModules;
    exports.defineMutations = defineMutations;
    exports.localActionContext = localActionContext;
    exports.localGetterContext = localGetterContext;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
